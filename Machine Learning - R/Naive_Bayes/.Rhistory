library(quantmod)
library(xts)
library(tidyquant)
stocklist <- c("BX", "HCP", "JNJ", "KKR", "KMB", "O", "PFE", "QCP", "GE")
stockqty <- c(27, 21, 5, 41, 5, 11, 18, 4, 13)
buydate <- c("2015-02-02", "2015-02-02", "2014-10-24", "2015-02-02", "2014-10-24",
"2014-10-24", "2014-10-24", "2016-11-01", "2017-06-07")
stocksum <- data.frame(stocklist, stockqty, buydate)
stocksum
str(stocksum)
library(quantmod)
library(xts)
library(tidyquant)
library(lubridate)
stocklist <- c("BX", "HCP", "JNJ", "KKR", "KMB", "O", "PFE", "QCP", "GE")
stockqty <- c(27, 21, 5, 41, 5, 11, 18, 4, 13)
buydate <- ymd(c("2015-02-02", "2015-02-02", "2014-10-24", "2015-02-02", "2014-10-24",
"2014-10-24", "2014-10-24", "2016-11-01", "2017-06-07"))
stocksum <- data.frame(stocklist, stockqty, buydate)
str(stocksum)
?tq_get
library(quantmod)
library(xts)
library(tidyquant)
library(lubridate)
stocklist <- c("BX", "HCP", "JNJ", "KKR", "KMB", "O", "PFE", "QCP", "GE")
stockqty <- c(27, 21, 5, 41, 5, 11, 18, 4, 13)
buydate <- ymd(c("2015-02-02", "2015-02-02", "2014-10-24", "2015-02-02", "2014-10-24",
"2014-10-24", "2014-10-24", "2016-11-01", "2017-06-07"))
stocksum <- data.frame(stocklist, stockqty, buydate)
# Get stock prices for multiple stocks
df <- stocklist %>%
tq_get(get = "stock.prices",
from = stocksum$buydate) %>%
mutate(symbol = as.factor(symbol))
head(df)
library(ggplot2)
ggplot(df, aes(x = date, y = adjusted, color = symbol)) +
geom_point() +
facet_wrap(~ symbol)
ggplot(df, aes(x = date, y = adjusted, color = symbol)) +
geom_point()
library(purrr)
?map2_df
df <- map2_df(stocklist, buydate, tq_get, get = "stock.prices")
head(df)
df <- apply(stocklist, tq_get, get = "stock.prices", from = buydate)
df <- lapply(stocklist, tq_get, get = "stock.prices", from = buydate)
test <- tq_get("BX", get = "stock.prices",
from = stocksum$buydate[1])
head(test)
test <- tq_get("BX", get = "stock.prices",
from = stocksum$buydate[1]) %>%
mutate(symbol = as.factor("BX"))
head(test)
BX_monthly <- to.monthly(data_xts)
head(BX_monthly)
library(quantmod)
library(xts)
library(tidyquant)
library(lubridate)
library(purrr)
stocklist <- c("BX", "HCP", "JNJ", "KKR", "KMB", "O", "PFE", "QCP", "GE")
stockqty <- c(27, 21, 5, 41, 5, 11, 18, 4, 13)
buydate <- ymd(c("2015-02-02", "2015-02-02", "2014-10-24", "2015-02-02", "2014-10-24",
"2014-10-24", "2014-10-24", "2016-11-01", "2017-06-07"))
stocksum <- data.frame(stocklist, stockqty, buydate)
# Get stock prices for multiple stocks
data <- data.frame()
for (i in 1:length(stocklist)) {
d <- tq_get(stocklist[i],
get = "stock.prices",
from = buydate[i]) %>%
mutate(symbol = stocklist[i])
data <- bind_rows(data, d)
}
data <- data %>%
mutate(symbol = as.factor(symbol))
head(data)
tail(data)
table(data$symbol)
summary(data)
library(ggplot2)
ggplot(data, aes(x = date, y = adjusted, color = symbol)) +
geom_line() +
facet_wrap(~ symbol) +
stat_smooth(se = FALSE)
# Total portfolio
data %>%
left_join(stocksum, by = c("symbol" = "stocklist")) %>%
mutate(stockvalueadj = adjusted * stockqty) %>%
group_by(date) %>%
summarize(dayvalue = sum(stockvalueadj)) %>%
ggplot(aes(date, dayvalue)) +
geom_vline(xintercept = buydate, color = 'red') +
geom_line() +
stat_smooth(se = FALSE)
# Normalize data
data_norm <- data %>%
group_by(symbol) %>%
mutate(adj_scale = scale(adjusted)) %>%
ungroup()
head(data_norm)
tail(data_norm)
ggplot(data_norm, aes(x = date, y = adj_scale, color = symbol)) +
geom_line() +
facet_wrap(~ symbol) +
geom_hline(yintercept = 0) +
stat_smooth(method = 'lm', se = FALSE)
library(PerformanceAnalytics)
data_BX <- filter(data, symbol == "BX")
data_xts <- as.xts(data_BX[,-c(1, 8)], order.by = data_BX$date)
data_xts$Return <- Return.calculate(data_xts$adjusted)
plot.xts(data_xts)
head(data_xts)
str(data_xts)
BX_monthly <- to.monthly(data_xts)
head(BX_monthly)
head(data_xts)
BX_monthly <- to.monthly(data_xts)
head(BX_monthly)
# Create sp500_returns using Return.calculate using the closing prices
BX_returns <- Return.calculate(BX_monthly[,4])
# Time series plot
plot.zoo(BX_returns)
table.CalendarReturns(sp500_returns)
table.CalendarReturns(BX_returns)
# Compute the mean monthly returns
mean(BX_returns)
# Compute the geometric mean of monthly returns
mean.geometric(BX_returns)
# Compute the standard deviation
sd(BX_returns)
# Compute the mean monthly returns
mean(BX_returns, na.rm = TRUE)
# Compute the geometric mean of monthly returns
mean.geometric(BX_returns)
# Compute the standard deviation
sd(BX_returns, na.rm = TRUE)
# Compute the annualized mean
Return.annualized(BX_returns)
# Compute the annualized standard deviation
StdDev.annualized(BX_returns)
# Compute the annualized Sharpe ratio: ann_sharpe
ann_sharpe <- SharpeRatio.annualized(BX_returns, scale=12)
# Compute all of the above at once using table.AnnualizedReturns()
table.AnnualizedReturns(BX_returns)
# Calculate the mean, volatility, and sharpe ratio of sp500_returns
returns_ann <- Return.annualized(BX_returns)
sd_ann <- StdDev.annualized(BX_returns)
sharpe_ann <- SharpeRatio.annualized(BX_returns, scale = 12, Rf = rf)
# Plotting the 12-month rolling annualized mean
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "Return.annualized")
abline(h = returns_ann)
# Plotting the 12-month rolling annualized standard deviation
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "StdDev.annualized")
abline(h = sd_ann)
# Plotting the 12-month rolling annualized Sharpe ratio
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "SharpeRatio.annualized", Rf = rf)
abline(h = sharpe_ann)
str(BX_returns)
returns_ann <- Return.annualized(BX_returns)
Return.annualized(BX_returns)
Return.annualized(BX_returns, scale = 12)
# Compute the annualized mean
Return.annualized(BX_returns, scale = 12)
# Compute the annualized standard deviation
StdDev.annualized(BX_returns, scale = 12)
ann_sharpe <- SharpeRatio.annualized(BX_returns, scale=12)
table.AnnualizedReturns(BX_returns)
# Calculate the mean, volatility, and sharpe ratio of sp500_returns
returns_ann <- Return.annualized(BX_returns, scale = 12)
sd_ann <- StdDev.annualized(BX_returns, scale = 12)
sharpe_ann <- SharpeRatio.annualized(BX_returns, scale = 12)
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "Return.annualized")
abline(h = returns_ann)
# Plotting the 12-month rolling annualized mean
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "Return.annualized", scale = 12)
abline(h = returns_ann)
# Plotting the 12-month rolling annualized standard deviation
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "StdDev.annualized", scale = 12)
abline(h = sd_ann)
# Plotting the 12-month rolling annualized Sharpe ratio
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "SharpeRatio.annualized")
abline(h = sharpe_ann)
charts.RollingPerformance(R = sp500_returns, width = 12
)
charts.RollingPerformance(R = BX_returns, width = 12)
charts.RollingPerformance(R = BX_returns, width = 12, scale = 12)
# calculate skewness and kurtosis
SkewnessKurtosisRatio(BX_returns)
skewness(BX_returns)
kurtosis(BX_returns)
chart.Histogram(BX_returns)
# Calculate the SemiDeviation
SemiDeviation(sp500_monthly)
# Calculate the value at risk
VaR(BX_monthly, p = 0.025)
VaR(BX_monthly, p = 0.05)
# Calculate the expected shortfall
ES(BX_monthly, p = 0.025)
ES(BX_monthly, p = 0.05)
# Calculate the SemiDeviation
SemiDeviation(BX_monthly)
# Calculate the value at risk
VaR(BX_monthly, p = 0.025)
VaR(BX_monthly, p = 0.05)
# Calculate the expected shortfall
ES(BX_monthly, p = 0.025)
ES(BX_monthly, p = 0.05)
head(BX_monthly)
head(BX_returns)
# Calculate the SemiDeviation
SemiDeviation(BX_returns)
# Calculate the value at risk
VaR(BX_returns, p = 0.025)
VaR(BX_returns, p = 0.05)
# Calculate the expected shortfall
ES(BX_returns, p = 0.025)
ES(BX_returns, p = 0.05)
# Table of drawdowns
table.Drawdowns(BX_returns)
# Plot of drawdowns
chart.Drawdown(BX_returns)
head(BX_returns)
BX_returns[-1, ]
head(BX_returns[-1, ])
table.Drawdowns(BX_returns[-1, ])
table.Drawdowns(BX_returns[-1, "data_xts.Close", drop = FALSE])
head(data_BX)
head(data_xts)
head(data_BX)
table.Drawdowns(data_xts$Return)
chart.Drawdown(data_xts$Return)
install.packages("tseries")
?rep
install.packages("PortfolioAnalytics")
library(quantmod)
getSymbols("FR0007051040")
getSymbols("FR0007051040")
getSymbols("FR0007051040.PA")
T <- getSymbols("FR0007051040.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
head(T)
tail(T)
autoplot.zoo(T$FR0010135103.PA.Adjusted)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
autoplot.zoo(na.approx(T$FR0010135103.PA.Adjusted))
library(ggplot2)
?arrow
?geom_path
install.packages("forcat")
library(dplyr)
?row
?count
?pbinom
?pnorm
?rpois
rep(1:12, 4)
rep(1:4, 4)
?rep
rep(4, 12*4)
rep_len(1:4, 12*4)
rep(1:4, 1:4)
rep(1:4, 1:12)
rep(1:4, 12)
?seq
seq(1, 4, by 12)
seq(1, 4, by = 12)
seq(1, 4)
seq(1, 4, length.out = 12)
seq(1, 4, by = 1, length.out = 12)
seq(0, 1, length.out = 11)
seq.int(1, 4, 1)
seq.int(1, 4, length.out = 4)
seq.int(1, 4, length.out = 12)
ind <- 10
1:length(ind)
length(ind)
1:ind
df <- data.frame(month = 0, amount = 43500)
df$amount[1]
df <- data.frame(month = 0, amount = 43500)
ind <- 10
for (i in 2:ind*12) {
df[i, "month"] <- i
df[i, "amount"] <- df$amount[1] +300
}
tail(df)
2:ind*12
2:(ind*12)
df <- data.frame(month = 0, amount = 43500)
ind <- 10
for (i in 2:(ind*12)) {
df[i, "month"] <- i
df[i, "amount"] <- df$amount[1] +300
}
tail(df)
source('~/.active-rstudio-document', echo=TRUE)
tail(df)
200 / 43500
79200 * 0.004597701
nrow(df)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("DT")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Define UI for application that plots features of movies
ui <- fluidPage(
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
wellPanel(
h3("Plotting"),      # Third level header: Plotting
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"),
selected = "critics_score"),
# Select variable for color
selectInput(inputId = "z",
label = "Color by:",
choices = c("Title Type" = "title_type",
"Genre" = "genre",
"MPAA Rating" = "mpaa_rating",
"Critics Rating" = "critics_rating",
"Audience Rating" = "audience_rating"),
selected = "mpaa_rating"),
# Set alpha level
sliderInput(inputId = "alpha",
label = "Alpha:",
min = 0, max = 1,
value = 0.5),
# Set point size
sliderInput(inputId = "size",
label = "Size:",
min = 0, max = 5,
value = 2),
# Enter text for plot title
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text to be used as plot title"),
),
wellPanel(
# Header
h3("Subsetting and sampling"),
# Select which types of movies to plot
checkboxGroupInput(inputId = "selected_type",
label = "Select movie type(s):",
choices = c("Documentary", "Feature Film", "TV Movie"),
selected = "Feature Film"),
# Select sample size
numericInput(inputId = "n_samp",
label = "Sample size:",
min = 1, max = nrow(movies),
value = 50),
),
wellPanel(
# Show data table
checkboxInput(inputId = "show_data",
label = "Show data table",
value = TRUE),
),
# Built with Shiny by RStudio
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/07/RStudio-Logo-Blue-Gray.png", height = "30px"),
".")
),
# Output:
mainPanel(
# Show scatterplot
h3("Scatterplot"),    # Horizontal line for visual separation
plotOutput(outputId = "scatterplot"),
br(),                 # Single line break for a little bit of visual separation
# Print number of obs plotted
h4(uiOutput(outputId = "n")),
br(), br(),           # Two line breaks for a little bit of visual separation
# Show data table
h3("Data table"),     # Third level header: Data table
DT::dataTableOutput(outputId = "moviestable")
)
)
)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?describeby
?describeBy
install.packages("psych")
install.packages("RODBC")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("vim")
install.packages("VIM")
install.packages(c("broom", "caTools", "evaluate", "git2r", "glue", "httpuv", "iterators", "modeltools", "pillar", "Rcpp", "RCurl", "robustbase", "rpart.plot", "stringi", "tmap", "tmaptools", "xts", "zoo"))
install.packages("yaml")
install.packages("forcats")
library(dplyr)
?count
?gather
library(tidyr)
?gather
source('~/GitHub/DS_Portfolio/Machine Learning - R/Knn Classifier - Cancer Data.R', echo=TRUE)
wd <- getwd()
if (wd != "C:/Users/pierr/Documents/GitHub/DS_Portfolio/Machine Learning - R/Naive_Bayes") {
setwd("./GitHub/DS_Portfolio/Machine Learning - R/Naive_Bayes/")
} else {
print("Already set!")
}
getwd()
wd <- getwd()
if (wd != "C:/Users/pierr/Documents/GitHub/DS_Portfolio/Machine Learning - R/Naive_Bayes") {
setwd("C:/Users/pierr/Documents/GitHub/DS_Portfolio/Machine Learning - R/Naive_Bayes/")
} else {
print("Already set!")
}
wd <- getwd()
if (wd != "C:/Users/pierr/Documents/GitHub/DS_Portfolio/Machine Learning - R/Naive_Bayes") {
setwd("C:/Users/pierr/Documents/GitHub/DS_Portfolio/Machine Learning - R/Naive_Bayes/")
} else {
print("Already set!")
}
wd <- getwd()
if (wd != "C:/Users/pierr/Documents/GitHub/DS_Portfolio/Machine Learning - R/Naive_Bayes") {
setwd("C:/Users/pierr/Documents/GitHub/DS_Portfolio/Machine Learning - R/Naive_Bayes/")
} else {
print("Already set!")
}
if("SMSSpamCollection.txt" %in% list.files()) {
sms_raw <- read.table("SMSSpamCollection.txt", header=FALSE, sep="\t", quote="", stringsAsFactors=FALSE)
} else {
download.file("http://www.dt.fee.unicamp.br/~tiago/smsspamcollection/smsspamcollection.zip",
destfile = "SMS_spam.zip")
unzip("SMS_spam.zip")
sms_raw <- read.table("SMSSpamCollection.txt", header=FALSE, sep="\t", quote="", stringsAsFactors=FALSE)
}
colnames(sms_raw) <- c("type", "text")
sms_raw$type <- factor(sms_raw$type)
# Shuffle the dataset
set.seed(123)
sms_raw <- sms_raw[sample(nrow(sms_raw)), ]
str(sms_raw)
df <- data.frame(month = 0, amount = 43500)
ind <- 30
for (i in 2:(ind*12)) {
df[i, "month"] <- i
df[i, "amount"] <- df$amount[i - 1] +300
}
monthlyrate <- 0.004597701
msg <- paste(round(df$amount[nrow(df)] * monthlyrate, digits = 2),
" EUR, after waiting for ",
ind, " years.", sep = "")
print(msg)
2:(ind*12)
tail(df)
getwd()
setwd("./GitHub/DS_Portfolio/Machine Learning - R/Naive_Bayes")
getwd()
df_train <- read.csv("train.csv")
df_test <- read.csv("test.csv")
df_train$label <- as.factor(df_train$label)
# Brief exploration
dim(df_train)
dim(df_test)
prop.table(table(df_train$label))
library(e1071)
m <- naiveBayes(label ~ ., data = df_train, laplace = 0)
pred <- predict(m, df_test, type = "class")
pred_subm <- data.frame(ImageId = 1:nrow(df_test), label = pred)
head(pred_subm)
library(dplyr)
final <- data.frame(Week = 15:52, dist = 15:52)
final %>%
mutate(Cumul = cumsum(dist) + 117.04)
install.packages(c("dbplyr", "e1071", "fansi", "ggformula", "ipred", "kernlab", "lava", "lme4", "maptools", "mapview", "ModelMetrics", "mosaic", "openssl", "party", "pkgconfig", "pls", "processx", "Quandl", "rattle", "RcppArmadillo", "reticulate", "rgdal", "rlang", "robustbase", "rpart.plot", "sandwich", "scales", "spData", "spdep", "timetk", "tmap", "tmaptools", "XML", "yaml"))
install.packages(c("dbplyr", "e1071", "fansi", "ggformula", "ipred", "kernlab", "lava", "lme4", "maptools", "mapview", "ModelMetrics", "mosaic", "openssl", "party", "pkgconfig", "pls", "processx", "Quandl", "rattle", "RcppArmadillo", "reticulate", "rgdal", "rlang", "robustbase", "rpart.plot", "sandwich", "scales", "spData", "spdep", "timetk", "tmap", "tmaptools", "XML", "yaml"))
install.packages(c("dbplyr", "e1071", "fansi", "ggformula", "ipred", "kernlab", "lava", "lme4", "maptools", "mapview", "ModelMetrics", "mosaic", "openssl", "party", "pkgconfig", "pls", "processx", "Quandl", "rattle", "RcppArmadillo", "reticulate", "rgdal", "rlang", "robustbase", "rpart.plot", "sandwich", "scales", "spData", "spdep", "timetk", "tmap", "tmaptools", "XML", "yaml"))
